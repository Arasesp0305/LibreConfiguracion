{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,qDAAqD;AACrD,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA;AACA;AACA,oBAAoB,QAAQ,EAAE,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wCAAwC;AAC5E;AACA;AACA;AACA,eAAe,YAAY,EAAE,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe,yCAAyC,eAAe;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,IAAI,MAAM;AACpC,CAAC;AACD;AACA,oBAAoB,4BAA4B;AAChD;AACA,mBAAmB,cAAc,IAAI,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB,QAAQ,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,+BAA+B,iBAAiB;AAChD,iCAAiC,oBAAoB;AACrD,oCAAoC,sBAAsB;AAC1D,KAAK;AACL,CAAC;;;;;;;;UElQD;UACA;UACA;UACA;UACA","sources":["webpack://libreconfiguracion/./src/index.ts","webpack://libreconfiguracion/webpack/before-startup","webpack://libreconfiguracion/webpack/startup","webpack://libreconfiguracion/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconsole.log(\"Hola Mundo\");\n/**\n * ------------------------------------------------\n * Tipos de Datos\n * ------------------------------------------------\n *\n * string\n * number - enteros y decimales\n * boolean - true / false\n * null\n * undefined\n */\n//\nvar nombre = \"Alejandro\"; // Variable Global\nlet apellido = \"Rasero\"; // Variable Local\nconst PI = 3.141592;\n//Podemos declarar varias variables en una misma linea e inicializarlas en la misma\nlet a = \"a\", b = \"b\", c = \"c\";\n/**\n * -------------------------------------------------------------\n * ARRAYS DE DATOS\n * -------------------------------------------------------------\n */\nlet alumnos1A = [\"Juan\", \"Jose\", \"Alex\"]; // Array que solo almacena un tipo de dato\nlet alumnos2A = [\"Fran\"];\nlet alumnos = [...alumnos1A, ...alumnos2A, \"Pablo\"]; // Los tres puntos devuelven todos los valores dentro de un Array\nlet valores = [\"Hola\", 2, true]; //Array que almacena varios tipos de datos\nconsole.log(alumnos);\n/**\n * ------------------------------------------------------------\n * formas de concatenar Strings\n * ------------------------------------------------------------\n *\n * + -> Une las cadenas de forma literal\n * , -> Une las cadenas con un espacio entre ellas\n * `` -> Al usar estas tildes como comillas podemos declarar las variables dentro del string con el formato ${variable}\n */\nconsole.log(\"Hola \" + nombre + \" \" + apellido);\nconsole.log(\"Hola\", nombre, apellido);\nconsole.log(`Hola ${nombre} ${apellido}`);\n/**\n * -------------------------------------------------------------\n * OBJETOS\n * -------------------------------------------------------------\n */\n//Declaracion de objetos de un solo uso\nlet misDatos = {\n    nombre: \"Alejandro\",\n    apellidos: \"Rasero\",\n    edad: 20\n};\nlet configuracion = Object.assign({ versionTS: \"Es6\", versionCodigo: \"1.0\" }, misDatos //Con los 3 puntos podemos concatenar los atributos de otro objeto\n);\nlet propiedad1 = configuracion.versionTS;\nlet propiedad2 = configuracion.versionCodigo;\nconsole.log(`${propiedad1} ${propiedad2}`);\n//Enumeraciones en TypeScript\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[\"Pendiente\"] = \"P\";\n    EstadoTarea[\"Enproceso\"] = \"E\";\n    EstadoTarea[\"Terminado\"] = \"T\";\n})(EstadoTarea || (EstadoTarea = {}));\n;\nlet estadoPendiente = EstadoTarea.Enproceso;\n//Declaramos una instancia del objeto\nlet tarea1 = { nombre: \"Tarea1\", prioridad: 2, estado: EstadoTarea.Enproceso };\n//Comparacion simple para comprobar el funcionamiento de los objetos\nif (tarea1.estado == \"E\") {\n    console.log(\"Estado en proceso\");\n}\nelse if (tarea1.estado == \"P\") {\n    console.log(\"Estado pendiente\");\n}\nelse if (tarea1.estado == \"T\") {\n    console.log(\"Estado terminado\");\n}\nlet empleado1 = { nombre: \"Alejandro\", edad: 20, sueldo: 2500 };\nconsole.log(empleado1.edad);\n//Se pueden declarar varios Type como tipo de dato para combinar dos constructores\nlet empleado2 = {\n    nombre: \"Juan\",\n    edad: 25,\n    sueldo: 3500,\n    id: 1234,\n};\n/**\n * -------------------------------------------------------------\n * BUCLES Y ESTRUCTURAS DE CONTROL\n * -------------------------------------------------------------\n */\n//Operador ternario \n//condicion ? verdadero : falso\nconsole.log(tarea1.estado == \"E\" ? `La tarea ${tarea1.nombre} se encuentra en ejecucion` : `La tarea ${tarea1.nombre} aÃºn no se encuentra en ejecucion`);\n//IF-ELSE\nif (tarea1.estado == \"P\") {\n}\nelse if (tarea1.estado == \"E\") {\n}\nelse {\n}\n//SWITCH\nswitch (tarea1.estado) {\n    case \"E\":\n        console.log(`La tarea ${tarea1.nombre} se encuentra en ejecucion`);\n        break;\n    case \"P\":\n        console.log(`La tarea ${tarea1.nombre} se encuentra en proceso`);\n        break;\n    case \"T\":\n        console.log(`La tarea ${tarea1.nombre} se encuentra terminada`);\n        break;\n    default:\n        console.log(\"Otro estado o no tiene estado\");\n        break;\n}\n//Try-Catch\ntry {\n    let numero1 = 1;\n    console.log(numero1.toString());\n    let texto = \"hola\";\n    texto;\n}\ncatch (error) {\n    console.log(\"Se ha producido un error:\", error);\n}\n/**\n * Bucles\n */\nlet listaTareas = [\n    {\n        nombre: \"Tarea 1\",\n        prioridad: 2,\n        estado: EstadoTarea.Enproceso\n    },\n    {\n        nombre: \"Tarea 2\",\n        prioridad: 2,\n        estado: EstadoTarea.Pendiente\n    },\n    {\n        nombre: \"Tarea 3\",\n        prioridad: 2,\n        estado: EstadoTarea.Terminado\n    }\n];\n//For-each\nlistaTareas.forEach((tarea, index) => {\n    console.log(`${tarea} - ${index}`);\n});\n//For\nfor (let index = 0; index < listaTareas.length; index++) {\n    const tarea = listaTareas[index];\n    console.log(`${tarea.nombre} - ${index}`);\n}\n//While\nwhile (tarea1.estado != EstadoTarea.Terminado) {\n    tarea1.prioridad++;\n    if (tarea1.prioridad == 5) {\n        tarea1.estado = EstadoTarea.Terminado;\n    }\n}\ntarea1.prioridad = 1;\n//Do-While\ndo {\n    tarea1.prioridad++;\n    if (tarea1.prioridad == 5) {\n        tarea1.estado = EstadoTarea.Terminado;\n    }\n} while (tarea1.estado != EstadoTarea.Terminado);\n/**\n * -------------------------------------------------------------\n * FUNCIONES\n * -------------------------------------------------------------\n */\n//Funciones sin parametros\nfunction saludar() {\n    let nombre = \"Alejandro\";\n    console.log(`Hola ${nombre}`);\n}\nsaludar();\n//Funciones con parametros\nfunction saludarPersona(nombre) {\n    console.log(`Hola ${nombre}`);\n}\nsaludarPersona(\"Alejandro\");\n//Funciones con parametros por defecto\nfunction despedirPersona(nombre = \"Pepe\") {\n    console.log(`Adios ${nombre}`);\n}\ndespedirPersona();\n//Funcion con parametros opcionales\nfunction despedidaOpcional(nombre) {\n    if (nombre) {\n        console.log(`Adios ${nombre}`);\n    }\n    else {\n        console.log(`Adios`);\n    }\n}\n//Funciones con varios tipos\nfunction ejemploVariosTipos(a) {\n    if (typeof (a) == \"string\") {\n        console.log(`Tu parametro es de tipo string`);\n    }\n    else {\n        console.log(`Tu parametro es de tipo number`);\n    }\n}\n//Funciones que devuelven valores\nfunction ejemploReturn() {\n    let nombre = \"Alejandro\";\n    return nombre;\n}\nlet nombre1 = ejemploReturn();\nconsole.log(nombre1);\n//Funciones con multiples parametros\nfunction ejemploMultiplesParams(...nombres) {\n    nombres.forEach((nombre) => {\n        console.log(nombre);\n    });\n}\nejemploMultiplesParams(\"Alejandro\", \"juan\", \"Jose\");\n//Funciones Flecha\nlet empleado = {\n    nombre: \"Alejandro\",\n    edad: 20,\n    sueldo: 15000\n};\nconst mostrarEmpleado = (empleado) => `${empleado.nombre} tiene ${empleado.edad} anios`;\nmostrarEmpleado(empleado);\nfunction getDataUniversity() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = yield fetch(\"http://universities.hipolabs.com/search?country=Spain\");\n        let respuesta = yield data.json();\n        return respuesta;\n    });\n}\ngetDataUniversity().then((data) => {\n    let contador = 0;\n    data.forEach((universidad) => {\n        contador++;\n        console.log(\"\\n\\n\");\n        console.log(`Universidad nÃºmero ${contador}`);\n        console.log(`Nombre: ${universidad.name}`);\n        console.log(`Dominios: ${universidad.domains}`);\n        console.log(`Paginas web: ${universidad.web_pages}`);\n    });\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"]();\n",""],"names":[],"sourceRoot":""}